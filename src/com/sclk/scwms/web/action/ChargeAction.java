/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sclk.scwms.web.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sclk.scwms.common.DateUtil;
import com.sclk.scwms.common.StringUtil;
import com.sclk.scwms.model.Charge;
import com.sclk.scwms.model.Customer;
import com.sclk.scwms.model.Location;
import com.sclk.scwms.model.Syscode;
import com.sclk.scwms.service.CargoManager;
import com.sclk.scwms.service.ChargeManager;
import com.sclk.scwms.service.CustomerManager;
import com.sclk.scwms.service.SyscodeManager;
import com.sclk.scwms.service.WarehouseManager;
import com.sclk.scwms.vo.CargoRecordItemsVO;
import com.sclk.scwms.vo.CargoVO;
import com.sclk.scwms.vo.WarehouseVO;
import com.sclk.scwms.web.form.CargoForm;
import com.sclk.scwms.web.form.ChargeForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-24-2010
 * 
 * XDoclet definition:
 * @struts.action path="/customer" name="customerForm" input="/jsp/customer.jsp" scope="request" validate="true"
 */
public class ChargeAction extends BaseAction {
	
	private CargoManager manager;

    public void setManager(CargoManager manager) {
    	this.manager = manager;
    }
    
    private ChargeManager chargeManager;

    public void setChargeManager(ChargeManager chargeManager) {
    	this.chargeManager = chargeManager;
    }
    
    private WarehouseManager warehouseManager;

    public void setWarehouseManager(WarehouseManager manager) {
    	this.warehouseManager = manager;
    }
    
    private SyscodeManager scmanager;

    public void setScmanager(SyscodeManager manager) {
    	this.scmanager = manager;
    }
    
    private CustomerManager customerManager;
    
    public void setCustomerManager(CustomerManager customerManager) {
		this.customerManager = customerManager;
	}
   
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChargeForm chargeForm = (ChargeForm) form;// TODO Auto-generated method stub
		
		List list = chargeManager.getChargeVOList("","");
		
		request.setAttribute("charge.list", list);
		
		return mapping.findForward("init");
		
	}
	
	public ActionForward query(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		ChargeForm chargeForm = (ChargeForm) form;// TODO Auto-generated method stub
		
		String customerName  = request.getParameter("customerName");
		if(customerName!=null){
			customerName = new String(customerName.getBytes("ISO8859_1"),"utf-8");
	}
		List list = chargeManager.getChargeVOList("",customerName);
		
		request.setAttribute("customerName", customerName);
		request.setAttribute("charge.list", list);
		
		return mapping.findForward("init");
		
	}
	
	public ActionForward items(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoForm cargoForm = (CargoForm) form;// TODO Auto-generated method stub
		String cargoId  = request.getParameter("cargoId");
		String locationId = request.getParameter("locationId");
		
		CargoVO cargoVO = manager.getCargoVO(StringUtil.stringToInteger(cargoId));
		
		ArrayList<Location> listLocation = new ArrayList<Location>();
		
		List<CargoRecordItemsVO> list = manager.getCargoItemsList(cargoId,locationId);
		
		for(CargoRecordItemsVO vo:list){
			
			Location location = new Location();
			if(vo.getLocationId() == null){
				location.setId(1);
			}else{
				location.setId(vo.getLocationId());
			}
			if(vo.getLocationId() == null){
				location.setWarehouseName("");
			}else{
				location.setWarehouseName(vo.getLocationName());
			}
			listLocation.add(location);
		}
		
		Set set = new HashSet();
		
		set.addAll(listLocation);//将list添加到set中
		
		listLocation.clear();//清除list中的数据
		
		listLocation.addAll(set);//将set中的数据重新写回list中
		
		request.setAttribute("cargoItems.list", list);
		request.setAttribute("cargoVO", cargoVO);
		request.setAttribute("listLocation", listLocation);
		
		return mapping.findForward("items");
		
	}
	
	public ActionForward initChargeEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChargeForm chargeForm = (ChargeForm) form;// TODO Auto-generated method stub
		
		String id = request.getParameter("id");
		String customerId  = request.getParameter("customerId");
		String date  = request.getParameter("date");
		String source  = request.getParameter("source");
		String type = request.getParameter("type");
		
		if(id != null && !id.equals("")){
			Charge charge = new Charge();
			charge = chargeManager.getCharge(StringUtil.stringToInteger(id));
			chargeForm.setId(id);
			chargeForm.setCustomerId(customerId);
			//chargeForm.setCustomerName(customerName);
			chargeForm.setType(charge.getType());
			chargeForm.setCategoryStr(charge.getCategory());
			//chargeForm.setTypeName(typeName);
			chargeForm.setUnit(charge.getUnit());
			//chargeForm.setUnitName(unitName);
			chargeForm.setWarehouseId(String.valueOf(charge.getWarehouseId()));
			//chargeForm.setWarehouseName(warehouseName);
			chargeForm.setArea(charge.getArea());
			chargeForm.setChargeDate1(String.valueOf(charge.getChargeDate1()));
			chargeForm.setChargeDate2(String.valueOf(charge.getChargeDate2()));
			
			if(charge.getChargeDate1() != null && charge.getChargeDate2() == null){
				chargeForm.setChargeRate("chargeRate.2");
				
			}else if(charge.getChargeDate1() != null && charge.getChargeDate2() != null){
				chargeForm.setChargeRate("chargeRate.3");
			}else{
				chargeForm.setChargeRate("chargeRate.1");
			}
			
			chargeForm.setUnitPrice(charge.getUnitPrice());
			chargeForm.setTotalPrice(charge.getTotalPrice());
			chargeForm.setCreateTime(DateUtil.dayToString(charge.getCreateTime()));
			chargeForm.setEffectiveDate(DateUtil.dayToString(charge.getEffectiveDate()));
			chargeForm.setExpiryDate(DateUtil.dayToString(charge.getExpiryDate()));
			chargeForm.setStatus(String.valueOf(charge.getStatus()));
			chargeForm.setChargeMethod(String.valueOf(charge.getChargeMethod()));
		}
		
		String customerName = "";
		if(type == null || !type.equals("batch")){
			Customer customer = customerManager.getCustomer(Integer.valueOf(customerId));
			customerName  = customer.getName();
		}
		
		List<WarehouseVO> warehouseList = warehouseManager.getWarehouseList();
		List chargeTypeList = scmanager.getChildren("chargeType");
		List chargeUnitList = scmanager.getChildren("chargeUnit");
		List chargeRateList = scmanager.getChildren("chargeRate");
		
		chargeForm.setCustomerName(customerName);
		
		if(date != null && !date.equals("")){
			
			if(DateUtil.stringToDate(date) == null){
				date = date + "-01";
			};
			
			chargeForm.setChargeDate(date);
			chargeForm.setChargeRate("chargeRate.1");
			
		}
		
		List<Syscode> categoryList = manager.getCategoryListByCustomerId(customerId);
		
		
		request.setAttribute("chargeType.list",chargeTypeList);
		request.setAttribute("chargeUnit.list",chargeUnitList);
		request.setAttribute("warehouse.list", warehouseList);
		request.setAttribute("chargeRate.list",chargeRateList);
		request.setAttribute("category.list",categoryList);		
		request.setAttribute("source",source);
		
		return mapping.findForward("initChargeEdit");
		
	}
	
	public ActionForward editCharge(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChargeForm chargeForm = (ChargeForm) form;// TODO Auto-generated method stub
		
		Charge charge = new Charge();
		
		charge.setId(StringUtil.stringToInteger(chargeForm.getId()));
		charge.setDescription(chargeForm.getDescription());
		
		if(chargeForm.getCategory() != null && chargeForm.getCategory().length > 0){
			String[] categoryArray = chargeForm.getCategory();
			String category = "";
			for(int i = 0;i < categoryArray.length;i++){
				category = category + categoryArray[i] + ",";
				
			}
			charge.setCategory(category);
			
		}
		
		
		charge.setType(chargeForm.getType());
		charge.setUnit(chargeForm.getUnit());
		charge.setWarehouseId(StringUtil.stringToInteger(chargeForm.getWarehouseId()));
		charge.setArea(chargeForm.getArea());
		
		charge.setChargeDate1(StringUtil.stringToInteger(chargeForm.getChargeDate1()));
		charge.setChargeDate2(StringUtil.stringToInteger(chargeForm.getChargeDate2()));
		charge.setUnitPrice(chargeForm.getUnitPrice());
		charge.setTotalPrice(chargeForm.getTotalPrice());
		charge.setCreateTime(DateUtil.stringToDate(chargeForm.getCreateTime()));
		charge.setChargeMethod(StringUtil.stringToInteger(chargeForm.getChargeMethod()));
		
		if(chargeForm.getChargeRate().equals("chargeRate.1")){
			charge.setEffectiveDate(DateUtil.stringToDate(chargeForm.getChargeDate()));
			charge.setExpiryDate(DateUtil.stringToDate(chargeForm.getChargeDate()));
		}else{
			charge.setEffectiveDate(DateUtil.stringToDate(chargeForm.getEffectiveDate()));
		}
		
		charge.setExpiryDate(DateUtil.stringToDate(chargeForm.getExpiryDate()));
		charge.setStatus(StringUtil.stringToInteger(chargeForm.getStatus()));
		
		String customerId = chargeForm.getCustomerId();
		
		String[] customerIdArr = customerId.split(",");
		for(int i = 0;i < customerIdArr.length;i++){
			charge.setCustomerId(StringUtil.stringToInteger(customerIdArr[i]));
			chargeManager.sava(charge);
			charge.setId(null);
		}
		
		List list = chargeManager.getChargeVOList("","");
		request.setAttribute("charge.list", list);
		String source = chargeForm.getSource();
		String actionForward = "";
		if(source.equals("charge")){
			actionForward = "/charge.do?method=init";
			
		}else if(source.equals("chargeDetail")){
			actionForward = "/chargeDetail.do?method=query&customerId="+chargeForm.getCustomerId();
			
		}
		
		return new ActionForward(actionForward,true);
		
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChargeForm chargeForm = (ChargeForm) form;// TODO Auto-generated method stub
		String customerId = request.getParameter("customerId");
		String chargeId = request.getParameter("chargeId");
		boolean deteleSuccess = chargeManager.deleteCharge(customerId, chargeId);
		
		String deteleResult = "";
		
		if(deteleSuccess){
			
			deteleResult = "";
		}
		
		PrintWriter out = null;
		try {
			out = response.getWriter();
			out.print(deteleResult);
			out.flush();
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		return null;
		
	}
	
	
}