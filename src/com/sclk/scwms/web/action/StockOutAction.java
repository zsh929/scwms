/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sclk.scwms.web.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sclk.scwms.common.ConfigUtil;
import com.sclk.scwms.common.DateUtil;
import com.sclk.scwms.common.JsonUtil;
import com.sclk.scwms.common.StringUtil;
import com.sclk.scwms.model.CargoRecord;
import com.sclk.scwms.model.ChargeRecord;
import com.sclk.scwms.model.PostionRecord;
import com.sclk.scwms.model.StockRecord;
import com.sclk.scwms.model.Syscode;
import com.sclk.scwms.model.Users;
import com.sclk.scwms.service.CargoManager;
import com.sclk.scwms.service.ChargeManager;
import com.sclk.scwms.service.CustomerManager;
import com.sclk.scwms.service.StockRecordManager;
import com.sclk.scwms.service.SyscodeManager;
import com.sclk.scwms.service.UserManager;
import com.sclk.scwms.vo.CargoVO;
import com.sclk.scwms.web.form.StockInForm;
import com.sclk.scwms.web.form.StockOutForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-25-2010
 * 
 * XDoclet definition:
 * @struts.action path="/stockIn" name="stockInForm" input="/jsp/stockIn.jsp" scope="request" validate="true"
 * @struts.action-forward name="init" path="/jsp/stockIn.jsp"  
 */
public class StockOutAction extends BaseAction {
	
	private CustomerManager customerManager;

    public void setCustomerManager(CustomerManager manager) {
    	this.customerManager = manager;
    }
    private UserManager userManager;

    public void setUserManager(UserManager manager) {
    	this.userManager = manager;
    }
    
    private StockRecordManager stockRecordManager;
    
    public void setStockRecordManager(StockRecordManager stockRecordManager) {
		this.stockRecordManager = stockRecordManager;
	}
    
    private CargoManager cargoManager;

    public void setCargoManager(CargoManager manager) {
    	this.cargoManager = manager;
    }
    private SyscodeManager scmanager;

    public void setScmanager(SyscodeManager manager) {
    	this.scmanager = manager;
    }
    
    private ChargeManager chargeManager;

    public void setChargeManager(ChargeManager chargeManager) {
    	this.chargeManager = chargeManager;
    }
    
    
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		String[] typeArr = {"chargeType.5","chargeType.6","chargeType.7"};
		String customerId = request.getParameter("customerId");
		String serialNumber = "";
		String eDate = new String();
		Date d = new Date();
		
		eDate = DateUtil.datetimeToStr("yyyy-MM-dd",d);
		
		List<CargoVO> cargoesList = null;
		
		if(customerId != null && !customerId.equals("")){
			cargoesList = stockRecordManager.getStockOutList(customerId,ConfigUtil.sDate,eDate);
			serialNumber = stockRecordManager.getSerialNumber(customerId,StockRecord.stockOut);
			
		}
		List list = customerManager.getCustomers();
		List ulist = userManager.getUsers();
		String cl = JsonUtil.list2json(list);
		//÷√ø’cargoList
		request.getSession().removeAttribute("cargoList");
		
		
		List<Syscode> chargeTypeList = scmanager.getChildren("chargeType");
		
		List<Syscode> chargeTypeList1 = new ArrayList();
		
		for(Syscode syscode:chargeTypeList){
			String codeKey = syscode.getCodeKey();
			boolean i = false;
			for(String s:typeArr){
				if(codeKey.equals(s)){
					i = true;
					break;
				}
			}
			
			if(i){
				chargeTypeList1.add(syscode);
				
			}
		}
		String chargeTypeListStr = JsonUtil.list2json(chargeTypeList1);
		
		request.setAttribute("cargoes.list", cargoesList);
		request.setAttribute("date", new Date());
		request.setAttribute("serialNumber", serialNumber);
		
		request.setAttribute("chargeType.list", chargeTypeListStr);
		stockOutForm.setCustomerJsonList(cl);
		stockOutForm.setUserList(ulist);
		return mapping.findForward("init");
	}
	
	public ActionForward getCargoesList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		String customerId = request.getParameter("customerId");
		
		String eDate = new String();
		Date d = new Date();
		
		eDate = DateUtil.datetimeToStr("yyyy-MM-dd",d);
		
		List<CargoVO> cargoesList = null;
		
		if(customerId != null && !customerId.equals("")){
			cargoesList = stockRecordManager.getStockOutList(customerId,ConfigUtil.sDate,eDate);
			
		}
		
		String cargoesListStr = JsonUtil.list2json(cargoesList);
		
		PrintWriter out = response.getWriter();  
		out.write(cargoesListStr);  
        out.flush();  
        out.close();
		
		return null;
	}
	
	public ActionForward remain(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		List list = customerManager.getCustomers();
		List ulist = userManager.getUsers();
		String cl = JsonUtil.list2json(list);
		
		stockOutForm.setCustomerJsonList(cl);
		stockOutForm.setUserList(ulist);
		return mapping.findForward("remain");
	}
	public ActionForward get(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		List list = customerManager.getCustomers();
		
		String cl = JsonUtil.list2json(list);
		stockOutForm.setCustomerJsonList(cl );
		return mapping.getInputForward();
	}
	
	public ActionForward verify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		String serialNumber = stockOutForm.getSerialNumber();
		
		
		StockRecord stockRecord = new StockRecord();
		stockRecord.setSerialNumber(serialNumber);
		stockRecord.setInOut(StockRecord.stockOut);;
		stockRecord.setCustomerId(StringUtil.stringToInteger(stockOutForm.getCustomerId()));
		
		
		
		List list = stockRecordManager.validateUnique(stockRecord);
		
		if(list.size() != 0){
			
			stockOutForm.setVerify("false");
			
		    return mapping.findForward("success");
			
			//return mapping.getInputForward();
		}
		return mapping.findForward("save");
	}
	
	public ActionForward initVerify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		return mapping.findForward("initVerify");
	}
	
	
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		Integer customerId = StringUtil.stringToInteger(stockOutForm.getCustomerId());
		Date time = DateUtil.stringToDate(stockOutForm.getTime());
		
		String[] totalWeightArr = request.getParameterValues("totalWeight");
		String[] idArr = request.getParameterValues("id");
		String[] quantityArr = request.getParameterValues("quantity");
		
		//String[] batchNumberArr = request.getParameterValues("batchNumber");
		//String[] dateProduceArr = request.getParameterValues("dateProduce");
		String[] locationIdArr = request.getParameterValues("locationId");
		String[] postionQuantityArr = request.getParameterValues("postionQuantity");
		
		String[] chargeTypeArr = request.getParameterValues("chargeType");
		String[] chargeWeightArr = request.getParameterValues("chargeWeight");
		String[] unitPriceArr = request.getParameterValues("unitPrice");
		String[] totalPriceArr = request.getParameterValues("totalPrice");
		
		StockRecord stockRecord = new StockRecord();
		
		stockRecord.setInOut(StockRecord.stockOut);
		stockRecord.setPersonHandling(stockOutForm.getPersonHandling());
		stockRecord.setSerialNumber(stockOutForm.getSerialNumber());
		stockRecord.setCustomerId(customerId);
		stockRecord.setType(stockOutForm.getType());
		stockRecord.setTime(time);
		stockRecord.setWholeWeight(stockOutForm.getWholeWeight());
		Set cargoRecords = new HashSet(0);
		
		if(totalWeightArr != null && idArr != null && quantityArr != null){
			for(int i = 0;i<idArr.length;i++){
				String id = idArr[i];
				String totalWeight = totalWeightArr[i];
				String quantity = quantityArr[i];
				
				//String batchNumber = batchNumberArr[i];
				//String dateProduce = dateProduceArr[i];
				String warehouseId = locationIdArr[i];
				
				if((totalWeight != null && !totalWeight.equals("")) || (quantity != null && !quantity.equals(""))){
					CargoRecord cargoRecord = new CargoRecord();
					cargoRecord.setCargoId(Integer.valueOf(id));
					if(!quantity.equals("0") && !quantity.equals("")){
						cargoRecord.setQuantity("-"+quantity);
					}else{
						cargoRecord.setQuantity("");
						
					}
					if(!totalWeight.equals("0") && !totalWeight.equals("")){
						cargoRecord.setTotalWeight("-"+totalWeight);
					}else{
						cargoRecord.setTotalWeight("");
						
					}

					cargoRecord.setBatchNumber("");
					//cargoRecord.setDateProduce(DateUtil.stringToDate(dateProduce));
					cargoRecord.setWarehouseId(StringUtil.stringToInteger(warehouseId));
					
					if(!postionQuantityArr[i].equals("")){
						Set postionQuantitySet = new HashSet(0);
						 
						String[] postionQuantitys = postionQuantityArr[i].split(",");
						
						for(int j = 0;j<postionQuantitys.length;j++){
							String postionQuantity = postionQuantitys[j];
							PostionRecord postionRecord = new PostionRecord();
							postionRecord.setPostionId(postionQuantity.split(":")[0]);
							postionRecord.setQuantity("-"+postionQuantity.split(":")[1]);
							postionRecord.setCargoRecord(cargoRecord);
							postionQuantitySet.add(postionRecord);
						}
						cargoRecord.setPostionRecords(postionQuantitySet);
					}
					
					cargoRecord.setStockRecord(stockRecord);
					cargoRecords.add(cargoRecord);
				}
			}
			stockRecord.setCargoRecords(cargoRecords);
			
			stockRecordManager.sava(stockRecord);
		}
		
		if(chargeTypeArr != null && chargeWeightArr != null && unitPriceArr != null && totalPriceArr != null){
			for(int i = 0;i<chargeTypeArr.length;i++){
				String chargeType = chargeTypeArr[i];
				
				String chargeWeight = chargeWeightArr[i];
				String unitPrice = unitPriceArr[i];
				String totalPrice = totalPriceArr[i];
				
				ChargeRecord ChargeRecord = new ChargeRecord();
				
				ChargeRecord.setCustomerId(customerId);
				ChargeRecord.setStockRecordId(stockRecord.getId());
				ChargeRecord.setChargeId(0);
				ChargeRecord.setDate(time);
				ChargeRecord.setChargeType(chargeType);
				
				ChargeRecord.setWeight(chargeWeight);
			
				ChargeRecord.setUnitPrice(unitPrice);
				
				ChargeRecord.setTotalPrice(totalPrice);
				
				chargeManager.sava(ChargeRecord);
				
			}
		}
		request.setAttribute("customerId", customerId);
		return mapping.findForward("success");
	}

	public ActionForward print(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockOutForm stockOutForm = (StockOutForm) form;// TODO Auto-generated method stub
		
		Set<CargoVO> cargoes = new HashSet(0);
		
		
		String[] idArr = request.getParameterValues("id");
		
		String[] printNumberArr = request.getParameterValues("printNumber");
		String[] printNameArr = request.getParameterValues("printName");
		String[] weightArr = request.getParameterValues("weight");
		String[] printUnitArr = request.getParameterValues("printUnit");
		String[] printLocationNameArr = request.getParameterValues("printLocationName");
		String[] quantityArr = request.getParameterValues("quantity");
		String[] totalWeightArr = request.getParameterValues("totalWeight");
		
		if(totalWeightArr != null && idArr != null && quantityArr != null){
			for(int i = 0;i<idArr.length;i++){
				String id = idArr[i];
				String totalWeight = totalWeightArr[i];
				String quantity = quantityArr[i];
				
				if((totalWeight != null && !totalWeight.equals("")) || (quantity != null && !quantity.equals(""))){
					CargoVO cargoVO = new CargoVO();
					//cargoRecord.setCargoId(Integer.valueOf(id));
					cargoVO.setQuantity(quantity);
					cargoVO.setTotalWeight(totalWeight);
					cargoVO.setNumber(printNumberArr[i]);
					cargoVO.setName(printNameArr[i]);
					cargoVO.setWeight(weightArr[i]);
					cargoVO.setUnit(printUnitArr[i]);
					cargoVO.setLocationName(printLocationNameArr[i]);
					
					cargoes.add(cargoVO);
				}
			}
		
		}
		
		request.setAttribute("cargoes", cargoes);
		
		
		return mapping.findForward("print");
	}
}
		
	
