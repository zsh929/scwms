/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sclk.scwms.web.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sclk.scwms.common.DateUtil;
import com.sclk.scwms.common.JsonUtil;
import com.sclk.scwms.common.StringUtil;
import com.sclk.scwms.model.CargoRecord;
import com.sclk.scwms.model.ChargeDetail;
import com.sclk.scwms.model.ChargeRecord;
import com.sclk.scwms.model.PostionRecord;
import com.sclk.scwms.model.StockRecord;
import com.sclk.scwms.model.Syscode;
import com.sclk.scwms.service.ChargeManager;
import com.sclk.scwms.service.CustomerManager;
import com.sclk.scwms.service.StockRecordManager;
import com.sclk.scwms.service.SyscodeManager;
import com.sclk.scwms.service.UserManager;
import com.sclk.scwms.service.WarehouseManager;
import com.sclk.scwms.vo.CargoVO;
import com.sclk.scwms.vo.ChargeVO;
import com.sclk.scwms.web.form.StockInForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-25-2010
 * 
 * XDoclet definition:
 * @struts.action path="/stockIn" name="stockInForm" input="/jsp/stockIn.jsp" scope="request" validate="true"
 * @struts.action-forward name="init" path="/jsp/stockIn.jsp"  
 */
public class StockInAction extends BaseAction {
	
	private CustomerManager customerManager;

    public void setCustomerManager(CustomerManager manager) {
    	this.customerManager = manager;
    }
    private UserManager userManager;

    public void setUserManager(UserManager manager) {
    	this.userManager = manager;
    }
    
    private StockRecordManager stockRecordManager;
    
    public void setStockRecordManager(StockRecordManager stockRecordManager) {
		this.stockRecordManager = stockRecordManager;
	}
    
    private WarehouseManager warehouseManager;

    public void setWarehouseManager(WarehouseManager manager) {
    	this.warehouseManager = manager;
    }
    
    private SyscodeManager scmanager;

    public void setScmanager(SyscodeManager manager) {
    	this.scmanager = manager;
    }
    
    private ChargeManager chargeManager;

    public void setChargeManager(ChargeManager chargeManager) {
    	this.chargeManager = chargeManager;
    }
    
    private SyscodeManager syscodeManager;

	public void setSyscodeManager(SyscodeManager manager) {
		this.syscodeManager = manager;
	}
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		String[] typeArr = {"chargeType.5","chargeType.6","chargeType.7"};
		List list = customerManager.getCustomers();
		List ulist = userManager.getUsers();
		List mList = warehouseManager.getWarehouseList();
		List<Syscode> chargeTypeList = scmanager.getChildren("chargeType");
		
		List<Syscode> chargeTypeList1 = new ArrayList();
		
		for(Syscode syscode:chargeTypeList){
			String codeKey = syscode.getCodeKey();
			boolean i = false;
			for(String s:typeArr){
				if(codeKey.equals(s)){
					i = true;
					break;
				}
			}
			
			if(i){
				chargeTypeList1.add(syscode);
				
			}
		}
		
		
		String cl = JsonUtil.list2json(list);
		//
		List<CargoVO> l = (List<CargoVO>) request.getSession().getAttribute("cargoList");
		
		
		//÷√ø’cargoList
		request.getSession().removeAttribute("cargoList");
		
		
		
		request.setAttribute("date", new Date());
		
		stockInForm.setCustomerJsonList(cl);
		stockInForm.setUserList(ulist);
		
		request.setAttribute("stockWarehouse.list", mList);
		
		//--------
		String lastSerialNumber = stockInForm.getSerialNumber();
		if(lastSerialNumber == null || lastSerialNumber.equals("")){
			
			lastSerialNumber = "0000001";
			
		}
		
		if(StringUtil.stringToInteger(lastSerialNumber) == null){
			stockInForm.setSerialNumber(lastSerialNumber);
			
			return mapping.findForward("init");
			
			
		}
		int serialNumberInt = StringUtil.stringToInteger(lastSerialNumber);
		serialNumberInt = serialNumberInt +1;
		
		String serialNumber = serialNumberInt + "";
		
		int i = serialNumber.length(); 
		
		if (i <= 7){ 
			String str0 = "0000000"; 
			serialNumber = str0.substring(0, str0.length() - serialNumber.length()) + serialNumber; 
		} 
		
		stockInForm.setSerialNumber(serialNumber);
		
		//------------------------------------------
		String print = request.getParameter("print");
		
		if(print != null && print.equals("true")){
			request.setAttribute("printCargoList", l);
			request.setAttribute("lastSerialNumber", lastSerialNumber);
			request.setAttribute("print", "true");
			
		}
		String chargeTypeListStr = JsonUtil.list2json(chargeTypeList1);
		request.setAttribute("chargeType.list", chargeTypeListStr);
		
		//------------------------------------------
	
		return mapping.findForward("init");
	}
	public ActionForward remain(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		List list = customerManager.getCustomers();
		List ulist = userManager.getUsers();
		List mList = warehouseManager.getWarehouseList();
		
		
		String cl = JsonUtil.list2json(list);
		
		stockInForm.setCustomerJsonList(cl);
		stockInForm.setUserList(ulist);
		request.setAttribute("stockWarehouse.list", mList);
		
		return mapping.findForward("remain");
	}
	public ActionForward get(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		List list = customerManager.getCustomers();
		
		String cl = JsonUtil.list2json(list);
		stockInForm.setCustomerJsonList(cl );
		return mapping.getInputForward();
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		String index = request.getParameter("index");
		int i = StringUtil.stringToInteger(index);
		
		List<CargoVO> l = (List<CargoVO>) request.getSession().getAttribute("cargoList");
		
		l.remove(i);
		request.getSession().setAttribute("cargoList", l);
		
		
		//////////////
		List list = customerManager.getCustomers();
		List ulist = userManager.getUsers();
		List mList = warehouseManager.getWarehouseList();
		
		
		String cl = JsonUtil.list2json(list);
		
		stockInForm.setCustomerJsonList(cl);
		stockInForm.setUserList(ulist);
		request.setAttribute("stockWarehouse.list", mList);
		///////////////////
		return mapping.findForward("delete");
	}
	
	
	public ActionForward verify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		String serialNumber = stockInForm.getSerialNumber();
		
		StockRecord stockRecord = new StockRecord();
		stockRecord.setSerialNumber(serialNumber);
		stockRecord.setInOut(StockRecord.stockIn);
		stockRecord.setCustomerId(StringUtil.stringToInteger(stockInForm.getCustomerId()));
		
		List<StockRecord> list = stockRecordManager.validateUnique(stockRecord);
		
		String verify = "true";
		PrintWriter out = null;
		
		if(list.size() != 0){
			
			verify = "false";
			
		}

 
		try {
			out = response.getWriter();
			out.print(verify);
			out.flush();
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	public ActionForward initVerify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		return mapping.findForward("initVerify");
	}
	
	public ActionForward print(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		return mapping.findForward("print");
	}
	
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockInForm stockInForm = (StockInForm) form;// TODO Auto-generated method stub
		
		Integer customerId = StringUtil.stringToInteger(stockInForm.getCustomerId());
		Date time = DateUtil.stringToDate(stockInForm.getTime());
		
		List<Syscode> chargeTypeList = syscodeManager.getItemForSelect("chargeType");
		Map syscodeMap = new HashMap();
		for(Syscode syscode:chargeTypeList){
			syscodeMap.put(syscode.getCodeKey(), syscode.getCodeValue());
		}
		
		String[] totalWeightArr = request.getParameterValues("totalWeight");
		String[] idArr = request.getParameterValues("id");
		String[] quantityArr = request.getParameterValues("quantity");
		
		String[] batchNumberArr = request.getParameterValues("batchNumber");
		String[] dateProduceArr = request.getParameterValues("dateProduce");
		String[] locationIdArr = request.getParameterValues("locationId");
		String[] postionQuantityArr = request.getParameterValues("postionQuantity");
		
		String[] chargeTypeArr = request.getParameterValues("chargeType");
		String[] chargeWeightArr = request.getParameterValues("chargeWeight");
		String[] unitPriceArr = request.getParameterValues("unitPrice");
		String[] totalPriceArr = request.getParameterValues("totalPrice");
		
		StockRecord stockRecord = new StockRecord();
		
		stockRecord.setInOut(StockRecord.stockIn);
		stockRecord.setPersonHandling(stockInForm.getPersonHandling());
		stockRecord.setSerialNumber(stockInForm.getSerialNumber());
		stockRecord.setCustomerId(customerId);
		stockRecord.setType(stockInForm.getType());
		stockRecord.setTime(time);
		stockRecord.setWholeWeight(stockInForm.getWholeWeight());
		
		
		
		Set cargoRecords = new HashSet(0);
		
		if(totalWeightArr != null && idArr != null && quantityArr != null){
			for(int i = 0;i<idArr.length;i++){
				String id = idArr[i];
				String totalWeight = totalWeightArr[i];
				String quantity = quantityArr[i];
				
				String batchNumber = batchNumberArr[i];
				String dateProduce = dateProduceArr[i];
				String locationId = locationIdArr[i];
				
				CargoRecord cargoRecord = new CargoRecord();
				cargoRecord.setCargoId(Integer.valueOf(id));
				cargoRecord.setQuantity(quantity);
				cargoRecord.setTotalWeight(totalWeight);
				cargoRecord.setStockRecord(stockRecord);
				
				cargoRecord.setBatchNumber(batchNumber);
				cargoRecord.setDateProduce(DateUtil.stringToDate(dateProduce));
				cargoRecord.setWarehouseId(StringUtil.stringToInteger(locationId));
				
				//cargoRecord.setUnitPrice(unitPrice);
				//cargoRecord.setCountUnit(countUnit);
				//cargoRecord.setTotalPrice(totalPrice);
				
				
				if(!postionQuantityArr[i].equals("")){
					Set postionQuantitySet = new HashSet(0);
					 
					String[] postionQuantitys = postionQuantityArr[i].split(",");
					
					for(int j = 0;j<postionQuantitys.length;j++){
						String postionQuantity = postionQuantitys[j];
						PostionRecord postionRecord = new PostionRecord();
						postionRecord.setPostionId(postionQuantity.split(":")[0]);
						postionRecord.setQuantity(postionQuantity.split(":")[1]);
						postionRecord.setCargoRecord(cargoRecord);
						postionQuantitySet.add(postionRecord);
					}
					cargoRecord.setPostionRecords(postionQuantitySet);
				}
				
				
				cargoRecords.add(cargoRecord);
			}
			stockRecord.setCargoRecords(cargoRecords);
		}
		
		stockRecordManager.sava(stockRecord);
		
		if(chargeTypeArr != null && chargeWeightArr != null && unitPriceArr != null && totalPriceArr != null){
			for(int i = 0;i<chargeTypeArr.length;i++){
				String chargeType = chargeTypeArr[i];
				
				String chargeWeight = chargeWeightArr[i];
				String unitPrice = unitPriceArr[i];
				String totalPrice = totalPriceArr[i];
				
				ChargeRecord ChargeRecord = new ChargeRecord();
				
				ChargeRecord.setCustomerId(customerId);
				ChargeRecord.setStockRecordId(stockRecord.getId());
				ChargeRecord.setChargeId(0);
				ChargeRecord.setDate(time);
				ChargeRecord.setChargeType(chargeType);
				
				ChargeRecord.setWeight(chargeWeight);
			
				ChargeRecord.setUnitPrice(unitPrice);
				
				ChargeRecord.setTotalPrice(totalPrice);
				
				chargeManager.sava(ChargeRecord);
				
			}
		}
		request.setAttribute("saveSuccess", "true");
		return mapping.findForward("success");
	}
	
	
}