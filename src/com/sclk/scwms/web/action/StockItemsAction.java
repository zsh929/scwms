/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sclk.scwms.web.action;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sclk.scwms.common.ChartUtil;
import com.sclk.scwms.common.ConfigUtil;
import com.sclk.scwms.common.DateUtil;
import com.sclk.scwms.common.JsonUtil;
import com.sclk.scwms.common.StringUtil;
import com.sclk.scwms.model.Customer;
import com.sclk.scwms.model.StockRecord;
import com.sclk.scwms.service.CustomerManager;
import com.sclk.scwms.service.StockManager;
import com.sclk.scwms.service.StockRecordManager;
import com.sclk.scwms.web.form.StockItemsForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-06-2010
 * 
 * XDoclet definition:
 * @struts.action path="/stockItems" name="stockItemsForm" input="/jsp/stockItems.jsp" scope="request" validate="true"
 */
public class StockItemsAction extends BaseAction {
	
	private StockManager manager;
	
		public void setManager(StockManager manager) {
			this.manager = manager;
	}
	
	private StockRecordManager stockRecordManager;

    public void setStockRecordManager(StockRecordManager manager) {
    	this.stockRecordManager = manager;
    }
    
    private CustomerManager customerManager;

    public void setCustomerManager(CustomerManager manager) {
    	this.customerManager = manager;
    }
    
    private StockManager stockManager;

    public void setStockManager(StockManager stockManager) {
    	this.stockManager = stockManager;
    }
   
    
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		String customerId = request.getParameter("customerId");
		
		String month = request.getParameter("month");
		
		String sDate = new String();
		String eDate = new String();
		Date d = new Date();
		
		if(month != null){
			d = DateUtil.stringToDate("yyyyMM", month);
			
		}
		
		Calendar  ca = Calendar.getInstance();
		
		ca.setTime(d);
		ca.add(Calendar.MONTH, -1);
		//md = ca.getTime();
		
		ca.set(Calendar.DAY_OF_MONTH, 21);
		sDate = DateUtil.datetimeToStr("yyyy-MM-dd", ca.getTime());
		
		ca.add(Calendar.MONTH, 1);
		ca.set(Calendar.DAY_OF_MONTH, 20);
		eDate = DateUtil.datetimeToStr("yyyy-MM-dd", ca.getTime());
		
		
		List stockRecordList = stockRecordManager.get(customerId, sDate, eDate);
		Customer c = customerManager.getCustomer(StringUtil.stringToInteger(customerId));
		
		request.setAttribute("customer", c);
		request.setAttribute("stockRecord.list", stockRecordList);
		request.setAttribute("month", d);
		request.setAttribute("monthList", ConfigUtil.getMonthList());
		
		
		return mapping.findForward("view");
	}
	
	
	public ActionForward all(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		
		String customerId = request.getParameter("customerId");
		
		Date bDate = DateUtil.stringToDate(request.getParameter("bDate"));
		Date eDate = DateUtil.stringToDate(request.getParameter("eDate"));
		String inOut = request.getParameter("inOut");
		
		if(bDate == null){
			bDate = DateUtil.getDate(new Date(), Calendar.MONTH, -1);
			
		}
		if(eDate == null){
			eDate = new Date();
			
		}
		List stockRecordList = stockRecordManager.get(StringUtil.stringToInteger(customerId),bDate, eDate,StringUtil.stringToShort(inOut));
		List customerList = customerManager.getCustomers();
		
		request.setAttribute("stockRecord.list", stockRecordList);
		request.setAttribute("customer.list", customerList);
		
		request.setAttribute("bDate", DateUtil.dayToString(bDate));
		request.setAttribute("eDate", DateUtil.dayToString(eDate));
		request.setAttribute("customerId", customerId);
		request.setAttribute("inOut", inOut);
		
		
		
		return mapping.findForward("all");
	}
	
	public ActionForward businessQuantityChart(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		Date bDate = DateUtil.stringToDate(ConfigUtil.sDate);
		Date eDate = new Date();
		
		String customerId = request.getParameter("customerId");
		
		String bd = request.getParameter("bDate");
		String ed = request.getParameter("eDate");
		
		if(bd != null && !bd.equals("")){
			
			bDate = DateUtil.stringToDate(bd);
			
		}
		
		if(ed != null && !ed.equals("")){
			
			eDate = DateUtil.stringToDate(ed);
			
		}
		
		String inOut = request.getParameter("inOut");
		
		StringBuffer stockRecordList = stockRecordManager.getBusinessQuantity(StringUtil.stringToInteger(customerId),bDate, eDate,StringUtil.stringToShort(inOut));
		List customerList = customerManager.getCustomers();
		
		request.setAttribute("stockRecord.list", stockRecordList);
		request.setAttribute("customer.list", customerList);
		
		request.setAttribute("bDate", DateUtil.dayToString(bDate));
		request.setAttribute("eDate", DateUtil.dayToString(eDate));
		request.setAttribute("customerId", customerId);
		request.setAttribute("inOut", inOut);
		
		
		
		return mapping.findForward("businessQuantityChart");
	}
	
	public ActionForward cargoRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		
		String stockRecordId  = request.getParameter("stockRecordId");
		
		StockRecord stockRecord = stockRecordManager.getStockRecord(StringUtil.stringToInteger(stockRecordId));
		
		request.setAttribute("stockRecord", stockRecord);
		
		return mapping.findForward("cargoRecord");
	}
	
	
	public ActionForward deleteConfirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		
		String stockRecordId  = request.getParameter("stockItemsId");
		String url = request.getParameter("url");
		String b = "";
		try {
			b = URLEncoder.encode(url,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  

		//StockRecord stockRecord = stockRecordManager.getStockRecord(StringUtil.stringToInteger(stockRecordId));
		
		request.setAttribute("stockItemsId", stockRecordId);
		request.setAttribute("url", b);
		
		return mapping.findForward("deleteConfirm");
	}
	
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		
		String stockItemsId  = request.getParameter("stockItemsId");
		String url  = request.getParameter("url");
		
		
		StockRecord stockRecord = stockRecordManager.getStockRecord(StringUtil.stringToInteger(stockItemsId));
		
		stockRecordManager.deleteStockRecord(stockRecord);
		
		//stockRecord.setInOut(StockRecord.stockCancel);
		//stockRecordManager.cancelStockRecord(stockRecord);
		
		ActionForward newforward = new ActionForward(url);//创建forward对象
	    newforward.setPath(url);//并设置路径
	    newforward.setRedirect(true);//然后重定向
	    return newforward;
	
		//return mapping.setPath(path);
	}
	
	public ActionForward customerStockItems(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub

		String customerId = request.getParameter("customerId");
		Customer customer = customerManager.getCustomer(StringUtil.stringToInteger(customerId));
		List customerList = customerManager.getCustomers();
		String cl = JsonUtil.list2json(customerList);
		
		String customerName = customer.getName();
		Date bDate = DateUtil.stringToDate(request.getParameter("bDate"));
		Date eDate = DateUtil.stringToDate(request.getParameter("eDate"));
		Date inventoryDate = DateUtil.getDate(bDate, -1);
		String bDateStr = DateUtil.dayToString(bDate);
		String eDateStr = DateUtil.dayToString(eDate);
		String inventoryDateStr = DateUtil.dayToString(inventoryDate);
		List list = stockRecordManager.getCustomerStockItems(customerId,bDate,eDate);	
		
		Double inventoryWeight = stockRecordManager.getInventoryWeight(customerId,ConfigUtil.dDate,inventoryDate);
		request.setAttribute("customerId",customerId);
		request.setAttribute("customerName",customerName);
		request.setAttribute("inventoryDate",inventoryDateStr);
		request.setAttribute("bDate",bDateStr);
		request.setAttribute("eDate",eDateStr);
		request.setAttribute("inventoryWeight",inventoryWeight);
		request.setAttribute("customer.list", cl);
		request.setAttribute("customerStockItems.list",list);
		
	    return mapping.findForward("customerStockItems");
	}

	public ActionForward chart(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		String customerId = request.getParameter("customerId");
		
		Date bDate = DateUtil.stringToDate(request.getParameter("bDate"));
		Date eDate = DateUtil.stringToDate(request.getParameter("eDate"));
		String inOut = request.getParameter("inOut");
		String title = "";
		if(bDate == null){
			bDate = DateUtil.getDate(new Date(), Calendar.MONTH, -1);
			
		}
		
		
		//
		
		int days = 360;
		
		days = DateUtil.getDays(bDate, eDate);
		
		List list = manager.getReportUserDefined(null,
												 customerId,
												 null,
												 bDate,
												 eDate);
		
		StringBuffer balanceWeight = new StringBuffer();
		StringBuffer inWeight = new StringBuffer();
		StringBuffer outWeight = new StringBuffer();
		StringBuffer date = new StringBuffer("[]");
		
		if(list != null){
		
		Iterator it = list.iterator();
		
		//-------------------------------
		if(days > 180){	
			title = "每月出入库及结存量合计";
			Date d = new Date();
			date.setLength(0);
			int i = 0;
			int j = 1;
			Double balanceWeight1 = 0.0;
			Double inWeight1 = 0.0;
			Double outWeight1 = 0.0;
			
			balanceWeight.append("[");
			inWeight.append("[");
			outWeight.append("[");
			date.append("[");
			while(it.hasNext()){
				Object[] obj = (Object[])it.next();
				d = (Date)obj[0];
				Calendar b = Calendar.getInstance();
				b.setTime(d);
				if(b.get(b.DAY_OF_MONTH) == 21){
					i = 1;
					balanceWeight1 = (Double)obj[5]/1000;
					if(obj[4] != null){
						inWeight1 =  (Double)obj[4]/1000;
					}
					if(obj[3] != null){
						outWeight1 =  -1 * (Double)obj[3]/1000;
					}
					
					
				}else{
				
					i++;
					balanceWeight1 = balanceWeight1 + (Double)obj[5]/1000;
					
					if(obj[4] != null){
						inWeight1 = inWeight1 + (Double)obj[4]/1000;
					}
					if(obj[3] != null){
						outWeight1 = outWeight1 +  (-1 * (Double)obj[3]/1000);
					}
					
				}	
				if(b.get(b.DAY_OF_MONTH) == 20){
					SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
					balanceWeight.append("[");
					balanceWeight.append(j);
					balanceWeight.append(",");
					balanceWeight.append(balanceWeight1/i);
					balanceWeight.append("],");
					
					inWeight.append("[");
					inWeight.append(j);
					inWeight.append(",");
					inWeight.append(inWeight1);
					inWeight.append("],");
					
					outWeight.append("[");
					outWeight.append(j);
					outWeight.append(",");
					outWeight.append(outWeight1);
					outWeight.append("],");
					
					j++;
					
		           
					date.append("'");
					
					date.append(f.format(d));
					date.append("',");
					
				}
				
			}
				balanceWeight.append("]");
				inWeight.append("]");
				outWeight.append("]");
				date.append("]");
			}else if(days > 62){
				title = "每周出入库及结存量合计";
				Date d = new Date();
				int i = 0;
				Double balanceWeight1 = 0.0;
				Double inWeight1 = 0.0;
				Double outWeight1 = 0.0;
				
				balanceWeight.append("[");
				inWeight.append("[");
				outWeight.append("[");
				
				
					while(it.hasNext()){
						Object[] obj = (Object[])it.next();
						d = (Date)obj[0];
						Calendar b = Calendar.getInstance();
						b.setTime(d);
						if(b.get(b.DAY_OF_WEEK) == b.MONDAY){
							i = 1;
							balanceWeight1 = (Double)obj[5]/1000;
							if(obj[4] != null){
								inWeight1 =  (Double)obj[4]/1000;
							}
							if(obj[3] != null){
								outWeight1 =  -1 * (Double)obj[3]/1000;
							}
							
							
						}else{
						
							i++;
							balanceWeight1 = balanceWeight1 + (Double)obj[5]/1000;
							
							if(obj[4] != null){
								inWeight1 = inWeight1 + (Double)obj[4]/1000;
							}
							if(obj[3] != null){
								outWeight1 = outWeight1 +  (-1 * (Double)obj[3]/1000);
							}
							
						}	
						
						if(b.get(b.DAY_OF_WEEK) == b.SUNDAY){
							balanceWeight.append("['");
							balanceWeight.append(DateUtil.dayToString(d));
							balanceWeight.append("',");
							balanceWeight.append(balanceWeight1/i);
							balanceWeight.append("],");
							
							inWeight.append("['");
							inWeight.append(DateUtil.dayToString(d));
							inWeight.append("',");
							inWeight.append(inWeight1);
							inWeight.append("],");
							
							outWeight.append("['");
							outWeight.append(DateUtil.dayToString(d));
							outWeight.append("',");
							outWeight.append(outWeight1);
							outWeight.append("],");
							
						}
						
					}
					balanceWeight.append("]");
					inWeight.append("]");
					outWeight.append("]");
					
					
					
				
				}else if(days <= 62){
				title = "每日出入库及结存量合计";
				balanceWeight.append("[");
				inWeight.append("[");
				outWeight.append("[");
				while(it.hasNext()){
					Object[] obj = (Object[])it.next();
					balanceWeight.append("['");
					balanceWeight.append(DateUtil.dayToString((Date)obj[0]));
					balanceWeight.append("',");
					balanceWeight.append((Double)obj[5]/1000);
					balanceWeight.append("],");
					
					inWeight.append("['");
					inWeight.append(DateUtil.dayToString((Date)obj[0]));
					inWeight.append("',");
					if(obj[4] == null){
						inWeight.append(0);
					}else{
						inWeight.append((Double)obj[4]/1000);
					}
					inWeight.append("],");
					
					outWeight.append("['");
					outWeight.append(DateUtil.dayToString((Date)obj[0]));
					outWeight.append("',");
					if(obj[3] == null){
						outWeight.append(0);
					}else{
						outWeight.append(-1 * (Double)obj[3]/1000);
					}
					
					outWeight.append("],");
				}
				balanceWeight.append("]");
				inWeight.append("]");
				outWeight.append("]");
			
			}
		}	
		request.setAttribute("balanceWeight", balanceWeight);
		request.setAttribute("inWeight", inWeight);
		request.setAttribute("outWeight", outWeight);
		request.setAttribute("date", date);
			
		List customerList = customerManager.getCustomers();
		
		request.setAttribute("customer.list", customerList);		
		request.setAttribute("bDate", DateUtil.dayToString(bDate));
		request.setAttribute("eDate", DateUtil.dayToString(eDate));
		request.setAttribute("customerId", customerId);
		request.setAttribute("inOut", inOut);
		request.setAttribute("title", title);
		return mapping.findForward("chart");
	}
	
	public ActionForward contrast(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		StockItemsForm stockItemsForm = (StockItemsForm) form;// TODO Auto-generated method stub
		
		
		String customerId = request.getParameter("customerId");
		
		Date bDate = DateUtil.stringToDate(request.getParameter("bDate"));
		Date eDate = DateUtil.stringToDate(request.getParameter("eDate"));
		
		Date bDate1 = DateUtil.stringToDate(request.getParameter("bDate"));
		Date eDate1 = DateUtil.stringToDate(request.getParameter("eDate"));
		
		bDate1 = DateUtil.getDate(bDate1,Calendar.YEAR,-1);
		eDate1 = DateUtil.getDate(eDate1,Calendar.YEAR,-1);
		
		String inOut = request.getParameter("inOut");
		
		if(bDate == null){
			bDate = DateUtil.getDate(new Date(), Calendar.MONTH, -1);
			
		}
		
		//
		int days = 360;
		
		days = DateUtil.getDays(bDate, eDate);
				
		List list = manager.getReportUserDefined(null,
												 customerId,
												 null,
												 bDate,
												 eDate);
		
		List list1 = manager.getReportUserDefined(null,
												 customerId,
												 null,
												 bDate1,
												 eDate1);
		
		ChartUtil c = new ChartUtil();
		
		StringBuffer balanceWeight = new StringBuffer();
		StringBuffer inWeight = new StringBuffer();
		StringBuffer outWeight = new StringBuffer();
		StringBuffer date = new StringBuffer("[]");
		
		manager.buildStockRecordChartDate(balanceWeight, inWeight, outWeight, date, list,days);
		
		
		request.setAttribute("balanceWeight", balanceWeight);
		request.setAttribute("inWeight", inWeight);
		request.setAttribute("outWeight", outWeight);
		request.setAttribute("date", date);
		
			
		StringBuffer balanceWeight1 = new StringBuffer();
		StringBuffer inWeight1 = new StringBuffer();
		StringBuffer outWeight1 = new StringBuffer();
		StringBuffer date1 = new StringBuffer();
		
		manager.buildStockRecordChartDate(balanceWeight1, inWeight1, outWeight1, date1, list1,days);
		
		
		request.setAttribute("balanceWeight1", balanceWeight1);
		request.setAttribute("inWeight1", inWeight1);
		request.setAttribute("outWeight1", outWeight1);
		request.setAttribute("date1", date1);
		
		
		
		
		
		List stockRecordList = stockRecordManager.get(StringUtil.stringToInteger(customerId),bDate, eDate,StringUtil.stringToShort(inOut));
		List customerList = customerManager.getCustomers();
		
		request.setAttribute("stockRecord.list", stockRecordList);
		request.setAttribute("customer.list", customerList);
		
		request.setAttribute("bDate", DateUtil.dayToString(bDate));
		request.setAttribute("eDate", DateUtil.dayToString(eDate));
		request.setAttribute("bDate1", DateUtil.dayToString(bDate1));
		request.setAttribute("eDate1", DateUtil.dayToString(eDate1));
		request.setAttribute("customerId", customerId);
		request.setAttribute("inOut", inOut);
		
		
		return mapping.findForward("chart");
	}
	
	
}